#!/bin/sh

set -e

if [ "$1" = "-h" ] && [ "$2" = "" ]; then
	p=`basename $0`
	cat <<EOF
NAME
	$p

SYNOPSYS
	$p [-h]
	$p <to> [-a|id|pattern]

DESCRIPTION
	Move (mv(1)) current file, or the one pointed by [-a|id|pattern],
	to the new one, updating acme's buffer's name accordingly.

	If to doesn't start with a leading '/', renaming is performed
	relatively instead of absolutely.

	If to describes a missing path, intermediate directories
	are created (mkdir(1) -p); existing file is overwritten,
	following mv(1)' semantic.

EXAMPLE
	Rename from "/home/foo/bar.c" to "/home/foo/baz.c":
		Mv /home/foo/baz.c
		Mv baz.c

	Renaming "/tmp/bar/" to "/tmp/foo/":
		Mv foo
		Mv foo/

BUGS:
	We may want to allow regexp(7) with capture, so as to allow
	renaming multiple files/buffers at once.

EOF
	exit 0
fi

if [ -z "$1" ]; then
	echo `basename $0` '<to> [-a|id|pattern]' >&2
	exit 1
fi

# NOTE: moving multiple buffers to a single location
# is likely a bug, hence we assume only one input file.
Getids $2 | sed 1q | while read x; do
	y=`Getfn $x`

	to="$1"
	if ! echo "$to" | grep -q '^/'; then
		to=`dirname $y`/$to
	fi

	mkdir -p `dirname $to`

	if [ -e "$y" ]; then mv "$y" "$to"; fi

	echo "name $to" | 9p write acme/$x/ctl
	echo get | 9p write acme/$x/ctl
done
