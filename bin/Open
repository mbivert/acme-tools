#!/bin/sh

set -e

if [ "$1" = "-h" ] && [ "$2" = "" ]; then
	p=`basename $0`
	cat <<EOF
NAME
	$p

SYNOPSYS
	$p [-h]
	$p [-m] [-n] [-p] [-u] [-x] <name> [pattern]

DESCRIPTION
	Open given file with acme, creating it as an empty file
	if necessary.

	If -m is specified, move back to / and open the first file
	that match given name. Note that this mimick Run's -m behavior,
	hence the option's name.

	If -n is specified, nor the file nor its parent directory will
	be created on disk/loaded from disk.

	If -p is specified, print opened files' acme windows' IDs,
	one per line.

	If -u is specified, $p will only open the file if no buffer
	matches the given pattern (unique). If no pattern is specified,
	the name will be used as a pattern instead. If there's already
	a corresponding buffer opened, then some of it will be
	made visible by writing show its acme/$id/ctl.

	If -x is specified, a chmod +x on the file is automatically
	performed.

	If -g is specified, the name is interpreted as a pattern
	to be grep(1)'d in \$HOME/acme.files: the first existing
	file matching the pattern is opened. If no match, exit
	with failure. -g implies -u.

	Paths starting with '/' are considered absolutely, otherwise,
	relatively.

	Nonexistent paths are created (mkdir(1) -p).

	Opened filenames are systematically added to \$HOME/acme.files,
	which is cleaned via sort(1) -u, and only contains absolute
	paths.

EXAMPLES
	The following will create a '+Buffer' window if there's no
	window with filename suffixed by +Buffer; this will be
	considered a "virtual" file, not tied to an on-disk file:

		Open -n -u '+Buffer' '\+Buffer$'

EOF
	exit 0
fi

fns=$HOME/acme.files
if [ ! -f "$fns" ]; then
	touch "$fns"
fi

up=
nocreate=
print=
uniq=
exec=
grep=
while getopts "mnpuxg" opt; do
	case "$opt" in
	m) up=1;;
	n) nocreate=1;;
	p) print=1;;
	u) uniq=1;;
	x) exec=1;;
	g) grep=1; uniq=1;;
	esac
done

shift $((OPTIND-1))

if [ -z "$1" ]; then
	echo `basename $0` '[-mnpux] <name> [pattern]'
fi

i="$1"
p="$2"
if [ -z "$2" ]; then
	# XXX clumsy
	p=`echo "$1" | sed 's,/,\\\/,g'`
fi

# NOTE: we have a similar loop in Run.
if [ -n "$up" ]; then
	d=$PWD
	while [ "$d" != "/" ]; do
		if [ -f "$d/$i" ] || [ -d "$d/$i" ]; then
			i="$d/$i"
			break
		fi
		d=`dirname $d`
	done
elif [ -n "$grep" ]; then
	j=$(grep "$i" $fns | while read f; do
		if [ -e "$f" ]; then
			echo $f
			break
		fi
	done)
	if [ -z "$j" ]; then
		echo "'$i' not found in $HOME/acme.files" 1>&2
		exit 1
	fi
	i="$j"
elif ! echo "$i" | grep -q '^/'; then
	i="$PWD/$i"
fi

if [ -z "$nocreate" ]; then
	# Create dirname on disk if missing
	mkdir -p `dirname "$i"`

	# $i is a new directory
	if echo "$i" | grep -q '/$'; then mkdir -p "$i"; fi

	# $i is a new file
	if [ ! -f "$i" ] && [ ! -d "$i" ]; then touch "$i"; fi

	# automatic chmod +x
	if [ -n "$exec" ]; then chmod +x "$i"; fi
fi

# uniq mode: don't open the buffer if one matching
#Â the pattern is already opened
if [ -n "$uniq" ]; then
	x=`Getids "$p" | sed 1q`
	if [ -z "$x" ]; then
		echo "name $i" | 9p write acme/new/ctl
	elif [ -z "$nocreate" ]; then
		# buffer already exists, and is not
		# a virtual file (nocreate unset):
		# we're about to reload it from disk,
		# but the buffer may have been altered:
		# get Write ctl get $id would then "fail"
		# with a warning, so instead, make sure
		# the changes are pushed to disk
		XPut $x
	fi
	Write ctl show $x
else
	echo "name $i" | 9p write acme/new/ctl
fi

# update $HOME/acme.files
tmp=`mktemp /tmp/acme.files.XXXXXX`
(cat $fns; echo "$i";) > $tmp
sort -u $tmp > $fns
rm $tmp

# Look for last one in case file is already opened,
# relying on Getids's IDs sorting.
# XXX this'll break once we reached c. INT_MAX
id=`Getids "$p" | sed -n '$p'`

if [ -z "$nocreate" ]; then
	Write ctl get $id
fi

if [ -n "$print" ]; then echo $id; fi

